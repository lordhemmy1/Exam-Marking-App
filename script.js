// --- Tab Switching --- document.querySelectorAll('.tab-button').forEach(btn => { btn.addEventListener('click', () => { document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active')); document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active')); btn.classList.add('active'); document.getElementById(btn.dataset.tab).classList.add('active'); }); });

// --- Global Data Structures --- const essayLimit = 20; let answerData = JSON.parse(localStorage.getItem('answerData') || '{"objectives":{},"essays":{}}'); let studentDB = JSON.parse(localStorage.getItem('studentDB') || '[]'); let scores = JSON.parse(localStorage.getItem('scores') || '[]'); let tempMark = { obj: 0, essay: 0 };

// --- Notification Function --- function notify(message) { const note = document.getElementById('marking-notification'); if (note) note.innerText = message; }

// --- Persistence --- function persistAnswers() { localStorage.setItem('answerData', JSON.stringify(answerData)); } function persistDB() { localStorage.setItem('studentDB', JSON.stringify(studentDB)); } function persistScores() { localStorage.setItem('scores', JSON.stringify(scores)); }

// --- Answer Tab: Build Forms --- function createObjectiveFormTwoCol(container, prefix) { container.innerHTML = ''; const entries = Object.entries(answerData.objectives); entries.forEach(([q, ans]) => { const div = document.createElement('div'); div.classList.add('two-col'); div.innerHTML = <label>Q${q}:</label><input type="text" id="${prefix}-${q}" value="${ans}" />; container.appendChild(div); }); }

function createEssayForm(container, prefix) { container.innerHTML = ''; const entries = Object.entries(answerData.essays); entries.forEach(([q, obj]) => { const div = document.createElement('div'); div.classList.add('essay-group'); div.innerHTML = <label>Q${q} (Mark: <input type=\"number\" id=\"${prefix}-mark-${q}\" value=\"${obj.mark}\" style=\"width:50px;\" />):</label> <textarea id=\"${prefix}-ans-${q}\" placeholder=\"Model answer\">${obj.answer}</textarea>; container.appendChild(div); }); }

// --- Answer Tab: File Upload --- function setupUploadListeners() { document.getElementById('upload-objective-answer').addEventListener('change', e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = evt => { const data = evt.target.result; const wb = XLSX.read(data, { type: 'binary' }); const sheet = wb.Sheets[wb.SheetNames[0]]; const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }); answerData.objectives = {}; rows.forEach((r, i) => { if (i === 0 && String(r[0]).toLowerCase().includes('question')) return; if (r[0] != null) answerData.objectives[r[0]] = r[1] || ''; }); createObjectiveFormTwoCol(document.getElementById('objective-answer-form'), 'objective-answer'); }; reader.readAsBinaryString(file); });

document.getElementById('upload-essay-answer').addEventListener('change', e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = evt => { const data = evt.target.result; const wb = XLSX.read(data, { type: 'binary' }); const sheet = wb.Sheets[wb.SheetNames[0]]; const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }); answerData.essays = {}; rows.forEach((r, i) => { if (i === 0 && String(r[0]).toLowerCase().includes('question')) return; if (r[0] != null) answerData.essays[r[0]] = { mark: +r[1] || 0, answer: r[2] || '' }; }); createEssayForm(document.getElementById('essay-answer-form'), 'essay-answer'); }; reader.readAsBinaryString(file); }); }

function saveAnswerData() { // read form overrides Object.keys(answerData.objectives).forEach(q => { const el = document.getElementById(objective-answer-${q}); if (el) answerData.objectives[q] = el.value.trim(); }); Object.keys(answerData.essays).forEach(q => { const m = document.getElementById(essay-answer-mark-${q}) || document.getElementById(essay-answer-mark-${q}); const a = document.getElementById(essay-answer-ans-${q}); if (m) answerData.essays[q].mark = +m.value || 0; if (a) answerData.essays[q].answer = a.value.trim(); }); persistAnswers(); alert('Answer data saved.'); }

// --- Students Database Tab --- function renderStudentDBTable() { const container = document.getElementById('student-db-reference'); container.innerHTML =  <table id="student-db-table"> <thead> <tr><th>Name</th><th>Class</th><th>Arm</th><th>Objective Answer</th><th>Essay Answers</th><th>Action</th></tr> </thead> <tbody> ${studentDB.map((s,i) => { const essays = s.essayAnswers.map(e=>e.image?[${e.image}]:e.answer).join('; '); return <tr data-index="${i}"><td>${s.name}</td><td>${s.class}</td><td>${s.arm}</td><td>${s.objAnswer}</td><td>${essays}</td><td><button onclick="editStudent(${i})">Edit</button></td></tr>; }).join('')} </tbody> </table>; }

function addNewEssayGroup(existing) { const container = document.getElementById('db-essay-form'); if (container.children.length >= essayLimit) return; const div = document.createElement('div'); div.classList.add('essay-group'); const idx = container.children.length + 1; div.innerHTML = <label>Q${idx}:</label> <input type="text" class="db-essay-qn" placeholder="Question No" value="${existing?.qNo||''}" /> <textarea class="db-essay-ans" placeholder="Answer">${existing?.answer||''}</textarea> <input type="file" class="db-essay-img" accept="image/*" /> <div class="essay-addition"> <button type="button" class="add-essay-btn">Continue</button> <button type="button" class="delete-essay-btn">Delete</button> </div> <div class="error-msg"></div>; container.appendChild(div); div.querySelector('.add-essay-btn').addEventListener('click', () => addNewEssayGroup()); div.querySelector('.delete-essay-btn').addEventListener('click', () => div.remove()); }

function resetStudentDB() { if (!confirm('Wipe all student records?')) return; studentDB = []; persistDB(); renderStudentDBTable(); }

function editStudent(idx) { const s = studentDB[idx]; const form = document.getElementById('db-student-form'); form.dataset.editIndex = idx; form.db-student-name.value = s.name; form.db-student-class.value = s.class; form.db-student-arm.value = s.arm; form.db-objective-answer.value = s.objAnswer; const essayContainer = document.getElementById('db-essay-form'); essayContainer.innerHTML = ''; s.essayAnswers.forEach(ea => addNewEssayGroup(ea)); }

function saveStudentData() { const name = document.getElementById('db-student-name').value.trim(); const cls = document.getElementById('db-student-class').value.trim(); const arm = document.getElementById('db-student-arm').value.trim(); const obj = document.getElementById('db-objective-answer').value.trim(); if (!name||!cls||!arm||!obj) return alert('Name, Class, Arm and Objective Answer are required.'); const groups = document.querySelectorAll('#db-essay-form .essay-group'); const essayAnswers = []; for (let g of groups) { const qn = g.querySelector('.db-essay-qn').value.trim(); const ans = g.querySelector('.db-essay-ans').value.trim(); const img = g.querySelector('.db-essay-img').files[0]?.name || ''; if (!qn) return g.querySelector('.error-msg').innerText='Question No required'; if (!ans && !img) return g.querySelector('.error-msg').innerText='Answer text or image required'; essayAnswers.push({ qNo: qn, answer: ans, image: img }); } const form = document.getElementById('db-student-form'); const editIdx = form.dataset.editIndex; if (editIdx != null) { studentDB[editIdx] = { name, class: cls, arm, objAnswer: obj, essayAnswers }; delete form.dataset.editIndex; } else { studentDB.push({ name, class: cls, arm, objAnswer: obj, essayAnswers }); if (studentDB.length > 400) studentDB.shift(); } persistDB(); renderStudentDBTable(); form.reset(); document.getElementById('db-essay-form').innerHTML=''; addNewEssayGroup(); }

function initDBForm() { const form = document.getElementById('db-student-form'); form.insertAdjacentHTML('afterbegin','<button type="button" onclick="resetStudentDB()">Reset Database</button>'); addNewEssayGroup(); renderStudentDBTable(); }

// --- Marking Tab --- function initMarkingTab() { const form = document.getElementById('student-info-form'); const select = document.createElement('select'); select.id = 'student-select'; select.innerHTML = '<option value="">Select Student</option>' + studentDB.map((s,i)=> <option value="${i}">${s.name} - ${s.class}-${s.arm}</option>).join(''); form.appendChild(select); document.getElementById('upload-student-btn').addEventListener('click', loadStudentForMarking); }

function loadStudentForMarking() { const idx = +document.getElementById('student-select').value; if (isNaN(idx)) return alert('Please select a student'); tempMark = { obj: 0, essay: 0 }; // Build Objective Form const objForm = document.getElementById('objective-marking-form'); objForm.innerHTML=''; Object.keys(answerData.objectives).forEach(q => { const div = document.createElement('div'); div.innerHTML = <label>Q${q}:</label><input type="text" id="objective-marking-${q}" />; objForm.appendChild(div); }); document.getElementById('objective-marking-details').innerHTML = '<div id="objective-detail-table"></div>';

// Build Essay Form document.getElementById('essay-marking-form').innerHTML = ''; document.getElementById('marking-notification').innerText = ''; }

function markObjectiveOnly() { const idx = +document.getElementById('student-select').value; if (isNaN(idx)) return; let score = 0; const total = Object.keys(answerData.objectives).length; let html = '<table><thead><tr><th>Q</th><th>Correct</th><th>Student</th><th>Remark</th></tr></thead><tbody>'; Object.entries(answerData.objectives).forEach(([q,correct]) => { const inp = document.getElementById(objective-marking-${q}); const stu = inp?.value.trim() || ''; const ok = correct.toLowerCase() === stu.toLowerCase(); if(ok) score++; html += <tr><td>${q}</td><td>${correct}</td><td>${stu}</td><td>${ok?'✔':'✖'}</td></tr>; }); html += '</tbody></table>'; document.getElementById('objective-detail-table').innerHTML = html; tempMark.obj = score; notify(Objective score: ${score}/${total}); }

function markEssays() { const idx = +document.getElementById('student-select').value; if (isNaN(idx)) return; const s = studentDB[idx]; tempMark.essay = 0; let html = '<table><thead><tr><th>Q</th><th>Model</th><th>Student</th><th>Mark</th><th>Actions</th></tr></thead><tbody>'; s.essayAnswers.forEach(ea => { const model = answerData.essays[ea.qNo] || { mark: 0, answer: '' }; const studAns = ea.image ? <img src="#" alt="${ea.image}" width="100"/> : ea.answer; html += <tr> <td>${ea.qNo}</td> <td>${model.answer} (${model.mark})</td> <td>${studAns}</td> <td id="remark-${ea.qNo}">0</td> <td> <button onclick="setEssayMark('${ea.qNo}','correct')">✔</button> <button onclick="setEssayMark('${ea.qNo}','custom')">✎</button> </td> </tr>; }); html += '</tbody></table>'; document.getElementById('essay-detail-table')?.remove(); const wrap = document.createElement('div'); wrap.id = 'essay-detail-table'; wrap.innerHTML = html; document.getElementById('essay-marking-form').appendChild(wrap); notify('Assign essay marks.'); }

function setEssayMark(qNo, type) { const model = answerData.essays[qNo] || { mark: 0 }; let m = 0; if (type === 'correct') m = model.mark; else if (type === 'custom') { const inp = prompt('Enter custom mark'); m = inp !== null ? (+inp || 0) : 0; } tempMark.essay += m; document.getElementById(remark-${qNo}).innerText = m; }

function finalizeMarking() { const idx = +document.getElementById('student-select').value; if (isNaN(idx)) return; const s = studentDB[idx]; const rec = { name: s.name, class: s.class, arm: s.arm, obj: tempMark.obj, ess: tempMark.essay, total: tempMark.obj + tempMark.essay }; scores.push(rec); persistScores(); renderScoreTable(); notify('Score recorded.'); }

// --- Score Tab --- function renderScoreTable() { const tbody = document.querySelector('#score-table tbody'); tbody.innerHTML = scores.map(s => <tr><td>${s.name}</td><td>${s.class}</td><td>${s.arm}</td><td>${s.obj}</td><td>${s.ess}</td><td>${s.total}</td></tr> ).join(''); }

function resetScores() { if (!confirm('Reset all scores?')) return; scores = []; persistScores(); renderScoreTable(); }

function downloadScores(format) { const header = ['Name','Class','Arm','Objective','Essay','Total']; const data = scores.map(s => [s.name,s.class,s.arm,s.obj,s.ess,s.total]); if (format === 'csv') { let csv = header.join(',') + '\n'; data.forEach(r => { csv += r.join(',') + '\n'; }); const blob = new Blob([csv], { type: 'text/csv' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'scores.csv'; a.click(); } else if (format === 'xlsx') { const ws = XLSX.utils.aoa_to_sheet([header, ...data]); const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, 'Scores'); const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' }); const blob = new Blob([wbout], { type: 'application/octet-stream' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'scores.xlsx'; a.click(); } else if (format === 'doc') { let html = '<table border="1"><tr>' + header.map(h=><th>${h}</th>).join('') + '</tr>'; data.forEach(r => { html += '<tr>' + r.map(c=><td>${c}</td>).join('') + '</tr>'; }); html += '</table>'; const blob = new Blob(['<html><body>' + html + '</body></html>'], { type: 'application/msword' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'scores.doc'; a.click(); } }

function resetAllData() { if (!confirm('Reset all data (answers, students, scores)?')) return; localStorage.clear(); location.reload(); }

// --- Window Load Initialization --- window.addEventListener('load', () => { setupUploadListeners(); if (Object.keys(answerData.objectives).length) createObjectiveFormTwoCol(document.getElementById('objective-answer-form'), 'objective-answer'); if (Object.keys(answerData.essays).length) createEssayForm(document.getElementById('essay-answer-form'), 'essay-answer'); initDBForm(); initMarkingTab(); renderScoreTable(); });

