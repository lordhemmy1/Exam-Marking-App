// --- Tab Switching --- document.querySelectorAll('.tab-button').forEach(btn => { btn.addEventListener('click', () => { document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active')); document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active')); btn.classList.add('active'); document.getElementById(btn.dataset.tab).classList.add('active'); }); });

// --- Global Data Structures --- const essayLimit = 20; let answerData = JSON.parse(localStorage.getItem('answerData') || '{"objectives":{},"essays":{}}'); let studentDB = JSON.parse(localStorage.getItem('studentDB') || '[]'); let scores = JSON.parse(localStorage.getItem('scores') || '[]'); let tempMark = { obj: 0, essay: 0 };

// --- Notification Function --- function notify(message) { const note = document.getElementById('marking-notification'); if (note) note.innerText = message; }

// --- Persistence --- function persistAnswers() { localStorage.setItem('answerData', JSON.stringify(answerData)); } function persistDB() { localStorage.setItem('studentDB', JSON.stringify(studentDB)); } function persistScores() { localStorage.setItem('scores', JSON.stringify(scores)); }

// --- Answer Tab: Build Forms --- function createObjectiveFormTwoCol(container, prefix) { container.innerHTML = ''; const entries = Object.entries(answerData.objectives); entries.forEach(([q, ans]) => { const div = document.createElement('div'); div.classList.add('two-col'); div.innerHTML = <label>Q${q}:</label><input type="text" id="${prefix}-${q}" value="${ans}" />; container.appendChild(div); }); }

function createEssayForm(container, prefix) { container.innerHTML = ''; const entries = Object.entries(answerData.essays); entries.forEach(([q, obj]) => { const div = document.createElement('div'); div.classList.add('essay-group'); div.innerHTML = <label>Q${q} (Mark: <input type=\"number\" id=\"${prefix}-mark-${q}\" value=\"${obj.mark}\" style=\"width:50px;\" />):</label> <textarea id=\"${prefix}-ans-${q}\" placeholder=\"Model answer\">${obj.answer}</textarea>; container.appendChild(div); }); }

// --- Answer Tab: File Upload --- function setupUploadListeners() { document.getElementById('upload-objective-answer').addEventListener('change', e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = evt => { const data = evt.target.result; const wb = XLSX.read(data, { type: 'binary' }); const sheet = wb.Sheets[wb.SheetNames[0]]; const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }); answerData.objectives = {}; rows.forEach((r, i) => { if (i === 0 && String(r[0]).toLowerCase().includes('question')) return; if (r[0] != null) answerData.objectives[r[0]] = r[1] || ''; }); createObjectiveFormTwoCol(document.getElementById('objective-answer-form'), 'objective-answer'); }; reader.readAsBinaryString(file); });

document.getElementById('upload-essay-answer').addEventListener('change', e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = evt => { const data = evt.target.result; const wb = XLSX.read(data, { type: 'binary' }); const sheet = wb.Sheets[wb.SheetNames[0]]; const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }); answerData.essays = {}; rows.forEach((r, i) => { if (i === 0 && String(r[0]).toLowerCase().includes('question')) return; if (r[0] != null) answerData.essays[r[0]] = { mark: +r[1] || 0, answer: r[2] || '' }; }); createEssayForm(document.getElementById('essay-answer-form'), 'essay-answer'); }; reader.readAsBinaryString(file); }); }

function saveAnswerData() { // read form overrides Object.keys(answerData.objectives).forEach(q => { const el = document.getElementById(objective-answer-${q}); if (el) answerData.objectives[q] = el.value.trim(); }); Object.keys(answerData.essays).forEach(q => { const m = document.getElementById(essay-answer-mark-${q}) || document.getElementById(essay-answer-mark-${q}); const a = document.getElementById(essay-answer-ans-${q}); if (m) answerData.essays[q].mark = +m.value || 0; if (a) answerData.essays[q].answer = a.value.trim(); }); persistAnswers(); alert('Answer data saved.'); }

// --- Students Database Tab --- function renderStudentDBTable() { const container = document.getElementById('student-db-reference'); container.innerHTML =  <table id="student-db-table"> <thead> <tr><th>Name</th><th>Class</th><th>Arm</th><th>Objective Answer</th><th>Essay Answers</th><th>Action</th></tr> </thead> <tbody> ${studentDB.map((s,i) => { const essays = s.essayAnswers.map(e=>e.image?[${e.image}]:e.answer).join('; '); return <tr data-index="${i}"><td>${s.name}</td><td>${s.class}</td><td>${s.arm}</td><td>${s.objAnswer}</td><td>${essays}</td><td><button onclick="editStudent(${i})">Edit</button></td></tr>; }).join('')} </tbody> </table>; }

function addNewEssayGroup(existing) { const container = document.getElementById('db-essay-form'); if (container.children.length >= essayLimit) return; const div = document.createElement('div'); div

